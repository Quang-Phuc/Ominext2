//phuclq
message ATWorkingTimeCSVRequest {
    string startDate=1;
    string endDate =2;
    repeated string oficeUserId = 3;
}
message ATWorkingTimeCSVReponse {
    repeated WorkingTimeCSV workingtimeCSV = 1;
    message WorkingTimeCSV {
        string checkAtStart = 1;
        string checkAtStop = 2;

    }
}
attendance.proto
////////////////////// AT0002Controller
@RequestMapping(value = "${endpoint.at.dr.staff.department.working_timeCSV}", method = RequestMethod.GET)
    public ResponseEntity<REGetListOfficeUserByOfficeIdDepartmentResponse> getWorkingTimeCSV(
        @ApiParam(value = "officeUserId", required = true)
        @RequestParam(value = "officeUserId", defaultValue = "") String officeUserId,
        @ApiParam(value = "targetDate", required = true)
        @RequestParam(value = "checkAtStart", defaultValue = "") String checkAtStart,
        @ApiParam(value = "checkAtStart", required = true)
        @RequestParam(value = "checkAtStop", defaultValue = "") String checkAtStop) {
        if (Strings.isEmpty(officeUserId)) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
        List<String> officeUserIds = Arrays.asList(officeUserId);
        ATWorkingTimeCSVReponse response =
            attendanceStubService.getWorkingTimeCSV(officeUserIds,checkAtStart,checkAtStop);
        return new ResponseEntity<>(HttpStatus.OK);
    }
////////////////////////AttendanceStubService.java
//phuclq
    public ATWorkingTimeCSVReponse getWorkingTimeCSV(List<String> officeUserIds, String checkAtStart,String checkAtStop) {
        AttendanceGrpc.AttendanceBlockingStub stub = AttendanceGrpc.newBlockingStub(channel);
        ATWorkingTimeCSVRequest request = ATWorkingTimeCSVRequest.newBuilder()
            .addAllOficeUserId(officeUserIds)
            .setStartDate(checkAtStart)
            .setEndDate(checkAtStop)
            .build();

        return stub.getWorkingTimeCSV(request);

    }
///////////////////////AttendanceGrpcServer.java
//Phuclq
    @Override
    public void getWorkingTimeCSV(ATWorkingTimeCSVRequest request, StreamObserver<ATWorkingTimeCSVReponse> responseObserver) {
        responseObserver.onNext(attendanceService.getWorkingTimeCSV(request));
        responseObserver.onCompleted();

    }
	
// CheckingLog.java
    //PhucLQ
    public ATWorkingTimeCSVReponse.WorkingTimeCSV asWorkingTimeCSV(String checkStart,String checkEnd) {
        ATWorkingTimeCSVReponse.WorkingTimeCSV.Builder workingTimeCSVBuilder = ATWorkingTimeCSVReponse.WorkingTimeCSV.newBuilder();
        workingTimeCSVBuilder.setCheckAtStart(checkStart);
        workingTimeCSVBuilder.setCheckAtStop(checkEnd);
        return workingTimeCSVBuilder.build();

    }
//// service \ AttendanceService
public ATWorkingTimeCSVReponse getWorkingTimeCSV(ATWorkingTimeCSVRequest request) {
        ATWorkingTimeCSVReponse.Builder response = ATWorkingTimeCSVReponse.newBuilder();
        String checkStart ;
        String checkEnd = "checkEnd";
        String startDate = request.getStartDate();
        String endDate = request.getEndDate();
        List<String> stringDate = getListDate(startDate, endDate);
        List<CheckingLog> checkingLogs = checkingLogRepository.findByOfficeUserIdInAndTargetDateIn(request.getOficeUserIdList(), stringDate);
        List<CheckingLog> staffLogs;
        List<String> officeUserIds = request.getOficeUserIdList();
        List<String> stringListDate = checkingLogs.stream().map(CheckingLog::getTargetDate).collect(Collectors.toList());
        for (String dateNow : stringListDate) {
            for (String officeUserId : officeUserIds) {
                staffLogs = checkingLogs.stream()
                        .filter(log -> log.getOfficeUserId().equals(officeUserId) && log.getTargetDate().equals(dateNow))
                        .collect(Collectors.toList());
                checkStart = DatesUtils.convertDateToString(staffLogs.get(0).getCheckedAt());
                if (staffLogs.size() % 2 == 0) {
                    checkEnd = DatesUtils.convertDateToString(staffLogs.get(staffLogs.size() - 1).getCheckedAt());
                }
                String finalCheckStart = checkStart;
                String finalCheckEnd = checkEnd;
                List<ATWorkingTimeCSVReponse.WorkingTimeCSV> workingTimeCSVList = checkingLogs
                        .stream().map(CheckingLog -> CheckingLog.asWorkingTimeCSV(finalCheckStart, finalCheckEnd)).collect(Collectors.toList());
                response.addAllWorkingtimeCSV(workingTimeCSVList);
                response.addAllWorkingtimeCSV(workingTimeCSVList);
            }
        }
        return response.build();
    }